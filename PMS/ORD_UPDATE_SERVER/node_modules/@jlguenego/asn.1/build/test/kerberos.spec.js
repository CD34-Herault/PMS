"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const fs_1 = require("fs");
const path_1 = require("path");
const util_1 = require("util");
const debug_1 = __importDefault(require("debug"));
const EncodingRule_1 = require("../src/EncodingRule");
const kerberos_json_1 = __importDefault(require("./data/kerberos.json"));
const kerberos_validated_json_1 = __importDefault(require("./data/kerberos.validated.json"));
const ASN1MsgUtils_1 = require("../src/ASN1MsgUtils");
const misc_1 = require("../src/misc");
const src_1 = require("../src");
const debug = debug_1.default('asn.1:test');
describe('Kerberos Protocol', () => {
    it('test hex base64 conv', () => {
        const base64Msg = fs_1.readFileSync(path_1.resolve(__dirname, 'data/kerberos.base64.der'), {
            encoding: 'utf8',
        });
        const hexMsg = fs_1.readFileSync(path_1.resolve(__dirname, 'data/kerberos.hex.der'), {
            encoding: 'utf8',
        });
        const buf = Buffer.from(misc_1.sanitize(base64Msg), 'base64').toString('hex');
        assert_1.default.deepStrictEqual(buf, misc_1.sanitize(hexMsg));
    });
    it('test kerberos AP-REQ msg', () => {
        const output = src_1.ASN1.parseFileMsg(path_1.resolve(__dirname, 'data/kerberos.hex.der'), {
            encodingRule: EncodingRule_1.EncodingRule.DER,
            format: 'hex',
        });
        debug('output: ', util_1.inspect(output, false, null, true));
        assert_1.default.deepStrictEqual(output, kerberos_json_1.default);
    });
    it('test kerberos asn.1 file from the RFC4120', () => {
        const definition = fs_1.readFileSync(path_1.resolve(__dirname, 'data/kerberos.asn1'), {
            encoding: 'utf8',
        });
        const module = src_1.ASN1.getModuleFromStr(definition);
        const validated = module.validate(kerberos_json_1.default, 'GSS-API');
        assert_1.default.deepStrictEqual(validated, kerberos_validated_json_1.default);
    });
    it('get the PrincipalName', () => {
        const generalStrings = ASN1MsgUtils_1.ASN1MsgUtils.queryAll(kerberos_json_1.default, 'tagLabel', 'GeneralString');
        const principalName = generalStrings
            .map(v => v.value)
            .slice(1)
            .join('/');
        assert_1.default.deepStrictEqual(principalName, 'HTTP/localhost');
    });
});
//# sourceMappingURL=kerberos.spec.js.map