"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayBufferCursor = exports.ItemType = void 0;
var ItemType;
(function (ItemType) {
    ItemType[ItemType["Int8"] = 0] = "Int8";
    ItemType[ItemType["Int16"] = 1] = "Int16";
    ItemType[ItemType["Int32"] = 2] = "Int32";
    ItemType[ItemType["Uint8"] = 3] = "Uint8";
    ItemType[ItemType["Uint16"] = 4] = "Uint16";
    ItemType[ItemType["Uint32"] = 5] = "Uint32";
    ItemType[ItemType["Float32"] = 6] = "Float32";
    ItemType[ItemType["Float64"] = 7] = "Float64";
    ItemType[ItemType["Float"] = 8] = "Float";
    ItemType[ItemType["Double"] = 9] = "Double";
})(ItemType = exports.ItemType || (exports.ItemType = {}));
class ArrayBufferCursor {
    constructor(buffer) {
        console.log('buffer: ', buffer);
        this.dataview = new DataView(buffer, 0);
        console.log('this.dataview: ', this.dataview);
        this.size = buffer.byteLength;
        console.log('this.size: ', this.size);
        this.index = 0;
        console.log('this.index: ', this.index);
    }
    next(type) {
        switch (type) {
            case ItemType.Int8: {
                const result = this.dataview.getInt8(this.index);
                this.index += 1;
                return result;
            }
            case ItemType.Uint8: {
                const result = this.dataview.getUint8(this.index);
                this.index += 1;
                return result;
            }
            case ItemType.Int16: {
                const result = this.dataview.getInt16(this.index, true);
                this.index += 2;
                return result;
            }
            case ItemType.Uint16: {
                const result = this.dataview.getUint16(this.index, true);
                this.index += 2;
                return result;
            }
            case ItemType.Int32: {
                const result = this.dataview.getInt32(this.index, true);
                this.index += 4;
                return result;
            }
            case ItemType.Uint32: {
                const result = this.dataview.getUint32(this.index, true);
                this.index += 4;
                return result;
            }
            case ItemType.Float:
            case ItemType.Float32: {
                const result = this.dataview.getFloat32(this.index, true);
                this.index += 4;
                return result;
            }
            case ItemType.Double:
            case ItemType.Float64: {
                const result = this.dataview.getFloat64(this.index, true);
                this.index += 8;
                return result;
            }
        }
    }
    hasNext() {
        console.log('this.index: ', this.index);
        console.log('this.size: ', this.size);
        return this.index < this.size;
    }
}
exports.ArrayBufferCursor = ArrayBufferCursor;
//# sourceMappingURL=ArrayBufferCursor.js.map