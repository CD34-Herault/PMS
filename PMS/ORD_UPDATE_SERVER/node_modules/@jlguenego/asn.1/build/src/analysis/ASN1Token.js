"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.allASN1Tokens = exports.Identifier = exports.TypeReference = exports.COMMA = exports.R_CURLY = exports.L_CURLY = exports.BOOLEAN = exports.UTF8String = exports.IA5String = exports.INTEGER = exports.END = exports.BEGIN = exports.AFFECTATION = exports.SEQUENCE = exports.DEFINITIONS = exports.WhiteSpace = void 0;
const chevrotain_1 = require("chevrotain");
// using createToken API
exports.WhiteSpace = chevrotain_1.createToken({
    name: 'WhiteSpace',
    pattern: /[ \t\n\r]+/,
    group: chevrotain_1.Lexer.SKIPPED,
});
exports.DEFINITIONS = chevrotain_1.createToken({
    name: 'Definitions',
    pattern: /DEFINITIONS/,
});
exports.SEQUENCE = chevrotain_1.createToken({
    name: 'Sequence',
    pattern: /SEQUENCE/,
});
exports.AFFECTATION = chevrotain_1.createToken({ name: 'Affectation', pattern: /::=/ });
exports.BEGIN = chevrotain_1.createToken({ name: 'Begin', pattern: /BEGIN/ });
exports.END = chevrotain_1.createToken({ name: 'End', pattern: /END/ });
exports.INTEGER = chevrotain_1.createToken({ name: 'Integer', pattern: /INTEGER/ });
exports.IA5String = chevrotain_1.createToken({ name: 'IA5String', pattern: /IA5String/ });
exports.UTF8String = chevrotain_1.createToken({
    name: 'UTF8String',
    pattern: /UTF8String/,
});
exports.BOOLEAN = chevrotain_1.createToken({ name: 'Boolean', pattern: /BOOLEAN/ });
exports.L_CURLY = chevrotain_1.createToken({ name: 'LCurly', pattern: /{/ });
exports.R_CURLY = chevrotain_1.createToken({ name: 'RCurly', pattern: /}/ });
exports.COMMA = chevrotain_1.createToken({ name: 'Comma', pattern: /,/ });
exports.TypeReference = chevrotain_1.createToken({
    name: 'TypeReference',
    pattern: /[A-Z]\w*/,
});
exports.Identifier = chevrotain_1.createToken({
    name: 'Identifier',
    pattern: /[a-z]\w*/,
});
exports.allASN1Tokens = [
    exports.WhiteSpace,
    // "keywords" appear before the Identifier
    exports.DEFINITIONS,
    exports.AFFECTATION,
    exports.BEGIN,
    exports.END,
    exports.SEQUENCE,
    exports.L_CURLY,
    exports.R_CURLY,
    exports.COMMA,
    exports.INTEGER,
    exports.IA5String,
    exports.BOOLEAN,
    // The Identifier must appear after the keywords because all keywords are valid identifiers.
    exports.Identifier,
    exports.TypeReference,
];
//# sourceMappingURL=ASN1Token.js.map