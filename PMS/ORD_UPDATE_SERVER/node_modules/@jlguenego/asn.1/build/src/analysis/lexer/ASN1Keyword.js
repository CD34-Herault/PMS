"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.k = void 0;
const chevrotain_1 = require("chevrotain");
const token = chevrotain_1.createToken({
    name: 'x',
    pattern: /x/,
});
exports.k = {
    // 'ENCODING-CONTROL': token,
    // 'RELATIVE-OID-IRI': token,
    // 'ABSTRACT-SYNTAX': token,
    // 'MINUS-INFINITY': token,
    EXTENSIBILITY: token,
    // 'NOT-A-NUMBER': token,
    // 'TIME-OF-DAY': token,
    INTERSECTION: token,
    ISO646String: token,
    APPLICATION: token,
    CONSTRAINED: token,
    COMPONENTS: token,
    CONTAINING: token,
    ENUMERATED: token,
    // 'DATE-TIME': token,
    AUTOMATIC: token,
    CHARACTER: token,
    EXPLICIT: token,
    SEQUENCE: token,
    SETTINGS: token,
    ENCODED: token,
    EXPORTS: token,
    ABSENT: token,
    EXCEPT: token,
    STRING: token,
    BEGIN: token,
    SIZE: token,
    ALL: token,
    END: token,
    MAX: token,
    SET: token,
    MIN: token,
    SYNTAX: token,
    BIT: token,
    NULL: token,
    T61String: token,
    BMPString: token,
    NumericString: token,
    TAGS: token,
    BOOLEAN: token,
    EXTERNAL: token,
    OBJECT: token,
    TeletexString: token,
    BY: token,
    FALSE: token,
    ObjectDescriptor: token,
    TIME: token,
    FROM: token,
    OCTET: token,
    CHOICE: token,
    GeneralizedTime: token,
    TRUE: token,
    CLASS: token,
    GeneralString: token,
    // 'OID-IRI': token,
    // 'TYPE-IDENTIFIER': token,
    COMPONENT: token,
    GraphicString: token,
    OPTIONAL: token,
    UNION: token,
    IA5String: token,
    PATTERN: token,
    UNIQUE: token,
    IDENTIFIER: token,
    PDV: token,
    UNIVERSAL: token,
    IMPLICIT: token,
    // 'PLUS-INFINITY': token,
    UniversalString: token,
    DATE: token,
    IMPLIED: token,
    PRESENT: token,
    UTCTime: token,
    IMPORTS: token,
    PrintableString: token,
    UTF8String: token,
    DEFAULT: token,
    INCLUDES: token,
    PRIVATE: token,
    VideotexString: token,
    DEFINITIONS: token,
    INSTANCE: token,
    REAL: token,
    VisibleString: token,
    DURATION: token,
    INSTRUCTIONS: token,
    // 'RELATIVE-OID': token,
    WITH: token,
    EMBEDDED: token,
    INTEGER: token,
    OF: token,
};
for (const name of Object.keys(exports.k)) {
    exports.k[name] = chevrotain_1.createToken({
        name,
        pattern: new RegExp(name),
    });
}
//# sourceMappingURL=ASN1Keyword.js.map