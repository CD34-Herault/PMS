"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ASN1Parser = void 0;
const chevrotain_1 = require("chevrotain");
const ASN1Lexer_1 = require("./ASN1Lexer");
class ASN1Parser extends chevrotain_1.CstParser {
    constructor() {
        super(ASN1Lexer_1.allASN1Tokens);
        this.RULE('ModuleDefinition', () => {
            this.SUBRULE(this.ModuleIdentifier);
            this.CONSUME(ASN1Lexer_1.DEFINITIONS);
            this.CONSUME(ASN1Lexer_1.AFFECTATION);
            this.CONSUME(ASN1Lexer_1.BEGIN);
            this.SUBRULE(this.ModuleBody);
            this.CONSUME(ASN1Lexer_1.END);
        });
        this.RULE('ModuleIdentifier', () => {
            this.CONSUME(ASN1Lexer_1.TypeReference);
        });
        this.RULE('ModuleBody', () => {
            this.SUBRULE(this.AssignmentList);
        });
        this.RULE('AssignmentList', () => {
            this.MANY(() => {
                this.SUBRULE(this.Assignment);
            });
        });
        this.RULE('Assignment', () => {
            this.OR([
                {
                    ALT: () => {
                        this.SUBRULE(this.TypeAssignment);
                    },
                },
            ]);
        });
        this.RULE('TypeAssignment', () => {
            this.CONSUME(ASN1Lexer_1.TypeReference);
            this.CONSUME(ASN1Lexer_1.AFFECTATION);
            this.SUBRULE(this.Type);
        });
        this.RULE('Type', () => {
            this.OR([
                {
                    ALT: () => {
                        this.SUBRULE(this.BuiltinType);
                    },
                },
            ]);
        });
        this.RULE('BuiltinType', () => {
            this.OR([
                {
                    ALT: () => {
                        this.SUBRULE(this.BooleanType);
                    },
                },
                {
                    ALT: () => {
                        this.SUBRULE(this.CharacterStringType);
                    },
                },
                {
                    ALT: () => {
                        this.SUBRULE(this.IntegerType);
                    },
                },
                {
                    ALT: () => {
                        this.SUBRULE(this.SequenceType);
                    },
                },
            ]);
        });
        this.RULE('BooleanType', () => {
            this.CONSUME(ASN1Lexer_1.BOOLEAN);
        });
        this.RULE('CharacterStringType', () => {
            this.OR([
                {
                    ALT: () => {
                        this.SUBRULE(this.RestrictedCharacterStringType);
                    },
                },
            ]);
        });
        this.RULE('RestrictedCharacterStringType', () => {
            this.OR([
                {
                    ALT: () => {
                        this.CONSUME(ASN1Lexer_1.IA5String);
                    },
                },
                {
                    ALT: () => {
                        this.CONSUME(ASN1Lexer_1.UTF8String);
                    },
                },
            ]);
        });
        this.RULE('IntegerType', () => {
            this.OR([
                {
                    ALT: () => {
                        this.CONSUME(ASN1Lexer_1.INTEGER);
                    },
                },
            ]);
        });
        this.RULE('SequenceType', () => {
            this.OR([
                {
                    ALT: () => {
                        this.CONSUME(ASN1Lexer_1.SEQUENCE);
                        this.CONSUME(ASN1Lexer_1.L_CURLY);
                        this.OPTION(() => {
                            this.SUBRULE(this.ComponentTypeLists);
                        });
                        this.CONSUME(ASN1Lexer_1.R_CURLY);
                    },
                },
            ]);
        });
        this.RULE('ComponentTypeLists', () => {
            this.OR([
                {
                    ALT: () => {
                        this.SUBRULE(this.ComponentTypeList);
                    },
                },
            ]);
        });
        this.RULE('ComponentTypeList', () => {
            this.SUBRULE(this.ComponentType);
            this.OPTION(() => {
                this.CONSUME(ASN1Lexer_1.COMMA);
                this.SUBRULE(this.ComponentTypeList);
            });
        });
        this.RULE('ComponentType', () => {
            this.OR([
                {
                    ALT: () => {
                        this.SUBRULE(this.NamedType);
                    },
                },
            ]);
        });
        this.RULE('NamedType', () => {
            this.CONSUME(ASN1Lexer_1.Identifier);
            this.SUBRULE(this.Type);
        });
        this.performSelfAnalysis();
    }
}
exports.ASN1Parser = ASN1Parser;
//# sourceMappingURL=ASN1Parser.js.map