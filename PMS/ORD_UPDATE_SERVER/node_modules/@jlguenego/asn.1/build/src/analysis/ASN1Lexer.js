"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ASN1Lexer = exports.allASN1Tokens = exports.NumberToken = exports.NegativeNumberToken = exports.Identifier = exports.TypeReference = exports.RANGE_SEPARATOR = exports.PIPE = exports.COMMA = exports.R_SQUARE = exports.L_SQUARE = exports.R_PARENTHESIS = exports.L_PARENTHESIS = exports.R_CURLY = exports.L_CURLY = exports.AFFECTATION = exports.WhiteSpace = exports.Comment = void 0;
const chevrotain_1 = require("chevrotain");
const ASN1Keyword_1 = require("./lexer/ASN1Keyword");
exports.Comment = chevrotain_1.createToken({
    name: 'Comment',
    pattern: /--.*?(?:\n|--)/,
    group: chevrotain_1.Lexer.SKIPPED,
});
exports.WhiteSpace = chevrotain_1.createToken({
    name: 'WhiteSpace',
    pattern: /[ \t\n\r]+/,
    group: chevrotain_1.Lexer.SKIPPED,
});
// Keywords
exports.AFFECTATION = chevrotain_1.createToken({ name: 'AFFECTATION', pattern: /::=/ });
exports.L_CURLY = chevrotain_1.createToken({ name: 'LCurly', pattern: /{/ });
exports.R_CURLY = chevrotain_1.createToken({ name: 'RCurly', pattern: /}/ });
exports.L_PARENTHESIS = chevrotain_1.createToken({ name: 'LParenthesis', pattern: /\(/ });
exports.R_PARENTHESIS = chevrotain_1.createToken({ name: 'RParenthesis', pattern: /\)/ });
exports.L_SQUARE = chevrotain_1.createToken({ name: 'LSquareBracket', pattern: /\[/ });
exports.R_SQUARE = chevrotain_1.createToken({ name: 'RSquareBracket', pattern: /\]/ });
exports.COMMA = chevrotain_1.createToken({ name: 'Comma', pattern: /,/ });
exports.PIPE = chevrotain_1.createToken({ name: 'Pipe', pattern: /\|/ });
exports.RANGE_SEPARATOR = chevrotain_1.createToken({
    name: 'RangeSeparator',
    pattern: /[.][.]/,
});
exports.TypeReference = chevrotain_1.createToken({
    name: 'TypeReference',
    // 12.2.1
    // Note: use of non capturing group. (?:xxx)
    pattern: /[A-Z](?:-?\w+)*/,
});
exports.Identifier = chevrotain_1.createToken({
    name: 'Identifier',
    // 12.3
    pattern: /[a-z](?:-?\w+)*/,
});
exports.NegativeNumberToken = chevrotain_1.createToken({
    name: 'NegativeNumber',
    // 12.8 and 19.1
    pattern: /-[1-9][0-9]*/,
});
exports.NumberToken = chevrotain_1.createToken({
    name: 'Number',
    // 12.8
    pattern: /(?:[1-9][0-9]*)|0/,
});
exports.allASN1Tokens = [
    exports.Comment,
    exports.WhiteSpace,
    ...Object.values(ASN1Keyword_1.k),
    // 3 chars
    exports.AFFECTATION,
    // 2 chars
    exports.RANGE_SEPARATOR,
    // 1 chars
    exports.L_CURLY,
    exports.R_CURLY,
    exports.L_PARENTHESIS,
    exports.R_PARENTHESIS,
    exports.L_SQUARE,
    exports.R_SQUARE,
    exports.COMMA,
    exports.PIPE,
    // The Identifier must appear after the keywords because all keywords are valid identifiers.
    exports.Identifier,
    exports.TypeReference,
    exports.NegativeNumberToken,
    exports.NumberToken,
];
exports.ASN1Lexer = new chevrotain_1.Lexer(exports.allASN1Tokens);
//# sourceMappingURL=ASN1Lexer.js.map