"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DERValidator = void 0;
const ASN1NamedType_1 = require("../../asn1/ASN1NamedType");
const ASN1Sequence_1 = require("../../asn1/ASN1Sequence");
const ASN1TaggedType_1 = require("../../asn1/ASN1TaggedType");
class DERValidator {
    validate(assignment, input) {
        if (assignment.type instanceof ASN1TaggedType_1.ASN1TaggedType) {
            this.validateTaggedType(assignment.type, input);
        }
        if (assignment.type instanceof ASN1Sequence_1.ASN1Sequence) {
            this.validateSequence(assignment.type, input);
        }
        input.tagName = assignment.name;
        return;
    }
    validateTaggedType(taggedType, input) {
        if (input.tagClass !== taggedType.tag.tagClass) {
            throw new Error('taggedType tagClass differ: ${input.tagClass} vs ${taggedType.tag.tagClass} ');
        }
        if (input.tagCode !== taggedType.tag.tagCode) {
            throw new Error('taggedType tagCode differ: ${input.tagCode} vs ${taggedType.tag.tagCode} ');
        }
        if (taggedType.type instanceof ASN1Sequence_1.ASN1Sequence) {
            this.validateSequence(taggedType.type, input.value[0]);
        }
    }
    validateSequence(sequence, input) {
        console.log('input: ', input);
        console.log('sequence: ', sequence);
        for (let i = 0; i < sequence.components.length; i++) {
            this.validateComponent(sequence.components[i], input.value[i]);
        }
    }
    validateComponent(component, input) {
        if (!(component instanceof ASN1NamedType_1.ASN1NamedType)) {
            throw new Error('can process only ASN1NamedType');
        }
        const name = component.type.constructor.name;
        switch (name) {
            case 'ASN1BooleanType':
                if (typeof input.value !== 'boolean') {
                    throw new Error('must be an boolean');
                }
                break;
            case 'ASN1IntegerType':
                if (!Number.isInteger(input.value)) {
                    throw new Error('must be an integer');
                }
                break;
            case 'ASN1IA5StringType':
                if (typeof input.value !== 'string') {
                    throw new Error(`must be an string: ${input}`);
                }
                break;
            default:
                break;
        }
        input.tagName = component.name;
    }
}
exports.DERValidator = DERValidator;
//# sourceMappingURL=DERValidator.js.map