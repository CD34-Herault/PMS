"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DERDecoder = void 0;
const TagUniversal_1 = require("../../interfaces/TagUniversal");
const Identifier_1 = require("../ber/decoder/Identifier");
const misc_1 = require("../ber/decoder/misc");
const DERInput_1 = require("./decoder/DERInput");
const ReadBoolean_1 = require("./decoder/primitive/ReadBoolean");
const ReadIA5String_1 = require("./decoder/primitive/ReadIA5String");
const ReadObjectIdentifier_1 = require("./decoder/primitive/ReadObjectIdentifier");
const ReadInteger_1 = require("./decoder/primitive/ReadInteger");
const ReadBitString_1 = require("./decoder/primitive/ReadBitString");
class DERDecoder {
    constructor(input) {
        this.derInput = new DERInput_1.DERInput(input);
    }
    decode() {
        const identifier = this.readIdentifierOctets();
        if (identifier.isComposed()) {
            return this.readComposed();
        }
        return this.readSimple(identifier);
    }
    readComposed() {
        const result = {};
        let key = 0;
        const length = this.readLengthOctets();
        if (length === 0) {
            return result;
        }
        const max = this.derInput.index + length;
        while (this.derInput.index < max) {
            const identifier = this.readIdentifierOctets();
            if (identifier.isComposed()) {
                result[key] = this.readComposed();
                key++;
                continue;
            }
            result[key] = this.readSimple(identifier);
            key++;
        }
        return result;
    }
    read() {
        return this.derInput.readUint8();
    }
    readString(length) {
        return this.derInput.readString(length);
    }
    readIdentifierOctets() {
        const result = new Identifier_1.Identifier();
        const octet = this.read();
        // (8.1.2.2 a)
        result.tagClass = misc_1.getTagClass(octet);
        // (8.1.2.2 b)
        result.constructed = misc_1.isConstructed(octet);
        // (8.1.2.4.1 c)
        result.tag = octet & 31;
        if (result.tag < 31) {
            return result;
        }
        // multi octets.
        let tagNumberStr = '';
        let octetN;
        while (true) {
            octetN = this.read();
            // bit 7 to 1 (8.1.2.4.2 b)
            const str = (octetN & 127).toString(2);
            console.log('str: ', str);
            tagNumberStr += str;
            // last octet (8.1.2.4.2 a)
            if ((octetN & 128) === 0) {
                break;
            }
        }
        // (8.1.2.4.2 b) concactenation
        result.tag = parseInt(tagNumberStr, 2);
        return result;
    }
    readLengthOctets() {
        const length = this.read();
        // (8.1.3.4): one octet case
        if ((length & 128) === 0) {
            return length;
        }
        // (8.1.3.5 b)
        let result = 0;
        for (let i = 0; i < length - 128; i++) {
            const nbr = this.read();
            result = result * 256 + nbr;
        }
        return result;
    }
    readSimple(identifier) {
        const length = this.readLengthOctets();
        if (identifier.tag === TagUniversal_1.TagUniversal.BOOLEAN) {
            return ReadBoolean_1.readBoolean(this, length);
        }
        if (identifier.tag === TagUniversal_1.TagUniversal.INTEGER) {
            return ReadInteger_1.readInteger(this, length);
        }
        if (identifier.tag === TagUniversal_1.TagUniversal.BIT_STRING) {
            return ReadBitString_1.readBitString(this, length);
        }
        if (identifier.tag === TagUniversal_1.TagUniversal.OCTET_STRING) {
            return ReadIA5String_1.readIA5String(this, length);
        }
        if (identifier.tag === TagUniversal_1.TagUniversal.OBJECT_IDENTIFIER) {
            return ReadObjectIdentifier_1.readObjectIdentifier(this, length);
        }
        if (identifier.tag === TagUniversal_1.TagUniversal.IA5STRING) {
            return ReadIA5String_1.readIA5String(this, length);
        }
        if (identifier.tag === TagUniversal_1.TagUniversal.GENERAL_STRING) {
            return ReadIA5String_1.readIA5String(this, length);
        }
        throw new Error(`cannot understand the identifier tag number: ${identifier.tag}`);
    }
}
exports.DERDecoder = DERDecoder;
//# sourceMappingURL=DERDecoder.js.map