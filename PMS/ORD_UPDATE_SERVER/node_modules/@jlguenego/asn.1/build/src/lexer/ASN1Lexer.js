"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ASN1Lexer = void 0;
const chevrotain_1 = require("chevrotain");
// using createToken API
const WhiteSpace = chevrotain_1.createToken({
    name: 'WhiteSpace',
    pattern: /[ \t\n\r]+/,
    group: chevrotain_1.Lexer.SKIPPED,
});
const Definitions = chevrotain_1.createToken({
    name: 'Definitions',
    pattern: /DEFINITIONS/,
});
const Sequence = chevrotain_1.createToken({
    name: 'Sequence',
    pattern: /SEQUENCE/,
});
const Assignment = chevrotain_1.createToken({ name: 'Assignment', pattern: /::=/ });
const Begin = chevrotain_1.createToken({ name: 'Begin', pattern: /BEGIN/ });
const End = chevrotain_1.createToken({ name: 'End', pattern: /END/ });
const Integer = chevrotain_1.createToken({ name: 'Integer', pattern: /INTEGER/ });
const IA5String = chevrotain_1.createToken({ name: 'IA5String', pattern: /IA5String/ });
const Boolean = chevrotain_1.createToken({ name: 'Boolean', pattern: /BOOLEAN/ });
const LCurly = chevrotain_1.createToken({ name: 'LCurly', pattern: /{/ });
const RCurly = chevrotain_1.createToken({ name: 'RCurly', pattern: /}/ });
const Comma = chevrotain_1.createToken({ name: 'Comma', pattern: /,/ });
const Identifier = chevrotain_1.createToken({
    name: 'Identifier',
    pattern: /[a-zA-Z]\w*/,
});
const allTokens = [
    WhiteSpace,
    // "keywords" appear before the Identifier
    Definitions,
    Assignment,
    Begin,
    End,
    Sequence,
    LCurly,
    RCurly,
    Comma,
    Integer,
    IA5String,
    Boolean,
    // The Identifier must appear after the keywords because all keywords are valid identifiers.
    Identifier,
];
exports.ASN1Lexer = new chevrotain_1.Lexer(allTokens);
//# sourceMappingURL=ASN1Lexer.js.map