"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ASN1 = void 0;
const fs_1 = require("fs");
const ASN1Module_1 = require("./asn1/ASN1Module");
const BERDecoder_1 = require("./codec/ber/decoder/BERDecoder");
const EncodingRule_1 = require("./EncodingRule");
const misc_1 = require("./misc");
class ASN1 {
    static parseMsg(message, opts = {}) {
        const options = {
            format: 'bin',
            encodingRule: EncodingRule_1.EncodingRule.DER,
            ...opts,
        };
        let input;
        if (typeof message === 'string') {
            input = misc_1.getArrayBufferFromStr(message, options.format);
        }
        else {
            input = message;
        }
        if ([EncodingRule_1.EncodingRule.BER, EncodingRule_1.EncodingRule.CER, EncodingRule_1.EncodingRule.DER].includes(options.encodingRule)) {
            return BERDecoder_1.BERDecode(input);
        }
        throw new Error('Encoding rule not yet implemented: ' + options.encodingRule);
    }
    static parseFileMsg(filename, opts = {}) {
        const options = {
            format: 'bin',
            encodingRule: EncodingRule_1.EncodingRule.DER,
            ...opts,
        };
        const encoding = options.format === 'bin' ? 'binary' : 'utf8';
        const content = fs_1.readFileSync(filename, { encoding });
        return ASN1.parseMsg(content, options);
    }
    static getModuleFromStr(definition) {
        return ASN1Module_1.ASN1Module.compile(definition);
    }
}
exports.ASN1 = ASN1;
//# sourceMappingURL=ASN1.js.map